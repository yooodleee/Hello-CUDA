// 병렬 처리의 개념 및 필요성

/*
GPU가 CPU보다 높은 성능을 보이는 이유 중 하나는 CPU에 비해 많은 수의 연산 코어(processing core)를 가진 대규모 병렬 처리
(parallel processing) 장치이기 때문이다. 따라서 GPU 프로그래밍은 병렬 처리를 전제로 한다. 본 절에서는 병렬 처리의 개념을
확인하고, 병렬 처리 및 병렬 처리 프로그래밍이 필요한 이유를 알아본다. 
*/

// 병렬 처리의 개념

/*
컴퓨터 시스템에서 일을 처리하는 주체는 CPU의 코어(core)와 같은 연산 유닛으로, 병렬 처리는 여러 개의 연산 자원이 동시에 일을
처리하는 것을 말한다. 병렬 처리의 또 하나 중요한 정의는 하나의 문제를 여러 연산 장치가 나누어 처리하는 것이다. 정리하면
병렬 처리는 하나의 문제를 여러 개의 연산 자원을 활용해서 해결하는 것으로 정의할 수 있다. 
*/

// 병렬 처리의 필요성

/*
* 사용자의 요구
    컴퓨터 또는 연산 장치를 사용하는 사용자의 요구는 간단하다. 원하는 작업이 빠르고, 정확하게 처리하는 것이다. 과거에는 이러한
    고성능 컴퓨팅이 요구되는 분야가 군사, 기상 분야와 같은 일부 과학 분야로 국한되었다. 그리고 주로 연산 코어의 클럭 주파수
    (clock frequency)를 높이는 방법, 즉 단일 코어 CPU의 성능을 높이는 방법으로 고성능에 대한 이러한 요구에 대응했다. 하지만
    현재 컴퓨터는 폭넓게 사용되고 있으며, 게임 및 빅데이터 처리 등 넓은 분야에서 빠르고 정확한 고성능 컴퓨팅이 요구된다. 그리고
    단일 코어의 성능을 높이기만 해서는 이러한 요구에 대응하기 어려웠다. 

    이처럼 지속적으로 높아지는 사용자의 요구를 충족하기 위해서는 단일 연산 장치(단일 CPU core)만 사용하기 보단, 많은 수의 연산
    코어 및 다수의 연산 장치를 동시에 사용하는 병렬 처리가 필요하다. 그리고 병렬 처리에서 사용자가 기대하는 것은 P개의 연산 자원을
    사용해서 P배의 성능을 형상시킬 수 있는 효율적인 병렬 처리 프로그램이라고 할 수 있다. 다만, 10명이 같이 일한다고 10배 빠라지지는
    않는 것처럼 P개의 연산 장치로 P개의 성능 형상을 얻기란 쉽지 않다. 

* 컴퓨팅 아키텍처의 발전 경향
    연산 장치 성능을 향상시키는 가장 기본적인 방법은 하나의 연산 코어에 트랜지스터(transistor)를 많이 집어 넣는 것이다. 실제로
    2000년 대 초반까지는 많은 연산 장치에서 이러한 전략을 사용하여 고집적 프로세서들이 높은 성능을 달성하는 데 성공했다. 하지만
    이러한 성능 향상 전략에 한계가 오기 시작했다. 

    많은 트랜지스터를 사용하면 전기를 많이 소모하게 된다. 전기를 많이 쓴다는 것은 높은 발열로 이어질 수 있다. 발열이 높다면 연산
    오류가 발생할 확률이 높아진다. 이러한 한계를 극복하고자 연산 장치 제조사들은 하나의 연산 코어에 대한 집적도를 높이면서 하나의 칩에
    여러 개의 연산 코어를 담는 전략을 선택하게 된다. 또한 고성능 연산 장치로 주목을 받고 있는 GPU는 수백에서 많게는 수천 개의 연산
    코어를 하나의 GPU에 담고 있다. 그리고 이러한 컴퓨팅 아키텍처의 발전 경향은 CPU와 GPU 뿐만 아니라 대부분의 연산 장치에서 사용되고
    있다. 
*/

// 병렬 처리 프로그래밍의 필요성

/*
그렇다면 병렬 컴퓨팅 장치들을 활용하려면 반드시 GPU 프로그래밍과 같은 병렬 처리 프로그래밍을 배워야 할까?
꼭 그렇진 않다. 일부 컴파일러의 경우 직렬 처리 코드 일부를 병렬 처리 코드로 바꾸는 기능이 있으며, 간단한 지시어를 추가하는 것만으로도
GPU를 사용한 병렬 처리가 가능하도록 도와주는 라이브러리나 도구가 존재한다. 하지만 이러한 자동 병렬화 기능은 일부 코드에 간단한 병렬 처리
방법을 적용하는 낮은 수준의 병렬화만 지원한다. 즉, 자동 병렬화 도구들은 활용 가능한 코드 범위가 제한적이며, 효율적인 병렬 처리 장치 활용 
여부가 보장되지 않는다. 실제로 병렬화 결과 성능이 더 낮아지거나, 잘못된 연산 결과가 나오는 경우도 많다. 

다음 예를 통해서 우리가 효율적인 병렬 처리 알고리즘을 직접 설계하고 구현해야 할 필요성을 살펴보자. 
N개의 값을 계산하고, 그 값을 모두 더한다. 직렬 처리를 한다면 computeNextValue 함수를 사용한다는 가정하에 for 문을 N번 돌면서 
값 x를 계산하고 그 값을 sum에 합산해주면 된다. 이 알고리즘은 다음과 같이 작성할 수 있다.
*/

int sum = 0;

for (int i = 0; i < N; i++) {
    int x = ComputeNextValue(); // 값 계산
    sum += x;
}

